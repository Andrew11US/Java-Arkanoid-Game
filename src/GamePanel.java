import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;

public class GamePanel extends JPanel implements KeyListener, Paintable {
    private Ball ball;
    private Paddle paddle;
    private ArrayList<Brick> bricks = new ArrayList<>();
    private Image image;
    private Thread thread;
    private boolean pause = true;
    private int lives = 3;

    public GamePanel() {
        resetScene();
        addKeyListener(this);
        setFocusable(true);
    }

    @Override
    public void paint(Graphics g) {
        this.ball.paint(g);
        this.paddle.paint(g);
        bricks.forEach(block -> block.paint(g));
        g.drawImage(image, 0, 0, this);
    }

    private void resetScene() {
        ball = new Ball();
        paddle = new Paddle();

        for(int i = 1; i < 7; ++i) {
            for(int j = 0; j < 4; ++j) {
                bricks.add(new Brick(i*60,j*40));
            }
        }


    }

    public void update() {

        ball.x += ball.xDirection * ball.speed;
        ball.y += ball.yDirection * ball.speed;

        if(ball.x > (getWidth() - 25) || ball.x < 0) {
            ball.xDirection *= -1;
        }

        if(ball.y < 0 || ball.intersects(paddle)) {
            ball.yDirection *= -1;
        }

        if (ball.y > getHeight()) {
            thread = null;
            // Loose or game over
            resetScene();
            pause();
        }

        bricks.forEach(block -> {
            if (ball.intersects(block) && !block.destroyed) {
                block.destroyed = true;
                ball.yDirection *= -1;
            }
        });

        repaint();
    }

    public void pause() {
        pause = !pause;

        if (pause) {
            ball.speed = 0;
        } else {
            ball.speed = 1;
        }
    }



    // MARK: Autogenerated methods for KeyListener

    @Override
    public void keyTyped(KeyEvent e) {

    }


    @Override
    public void keyPressed(KeyEvent e) {
        if (e.getKeyCode() == KeyEvent.VK_SPACE && thread == null) {
            System.out.println("Space");
            pause();
            thread = new Thread(() -> {
                while (true) {
                    update();
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        ex.printStackTrace();
                    }
                }
            });
            thread.start();
        }

        if (e.getKeyCode() == KeyEvent.VK_RIGHT && paddle.x < (getWidth() - paddle.width)) {
            if (!pause) {
                paddle.x += 15;
                update();
            }
        }

        if (e.getKeyCode() == KeyEvent.VK_LEFT && paddle.x > 0) {
            if (!pause) {
                paddle.x -= 15;
                update();
            }
        }

        if (e.getKeyCode() == KeyEvent.VK_P) {
//            System.out.println("P");
            pause();
        }
    }




    @Override
    public void keyReleased(KeyEvent e) {

    }
}
